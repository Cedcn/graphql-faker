{"version":3,"file":"proxy.js","sourceRoot":"","sources":["../src/proxy.ts"],"names":[],"mappings":"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","sourcesContent":["import fetch, { Headers } from \"node-fetch\";\nimport { set as pathSet, get as pathGet } from \"lodash\";\nimport {\n  Kind,\n  parse,\n  print,\n  visit,\n  TypeInfo,\n  formatError,\n  printSchema,\n  extendSchema,\n  isAbstractType,\n  visitWithTypeInfo,\n  buildClientSchema,\n  introspectionQuery,\n  separateOperations,\n  DocumentNode\n} from \"graphql\";\n// import Cookies from 'js-cookie'\nvar tough = require(\"tough-cookie\");\nimport { fakeSchema } from \"./fake_schema\";\n\ntype RequestInfo = {\n  document: DocumentNode;\n  variables?: { [name: string]: any };\n  operationName?: string;\n  result?: any;\n};\n\nexport function proxyMiddleware(url, headers) {\n  const remoteServer = requestFactory(url, headers);\n\n  return getIntrospection().then(introspection => {\n    const introspectionSchema = buildClientSchema(introspection.data);\n    const introspectionIDL = printSchema(introspectionSchema);\n\n    return [\n      introspectionIDL,\n      (serverSchema, extensionIDL, forwardHeaders, res) => {\n        const extensionAST = parse(extensionIDL);\n        const extensionFields = getExtensionFields(extensionAST);\n        const schema = extendSchema(serverSchema, extensionAST);\n        fakeSchema(schema);\n\n        //TODO: proxy extensions\n        return {\n          schema,\n          formatError: error => ({\n            ...formatError(error),\n            ...pathGet(error, \"originalError.extraProps\", {})\n          }),\n          rootValue: (info: RequestInfo) => {\n            const operationName = info.operationName;\n            const variables = info.variables;\n            const query = stripQuery(\n              schema,\n              info.document,\n              operationName,\n              extensionFields\n            );\n\n            return remoteServer(\n              query,\n              variables,\n              operationName,\n              forwardHeaders,\n              res\n            ).then(buildRootValue);\n          }\n        };\n      }\n    ];\n  });\n\n  function getIntrospection() {\n    return remoteServer(introspectionQuery)\n      .then(introspection => {\n        if (introspection.errors)\n          throw Error(JSON.stringify(introspection.errors, null, 2));\n        return introspection;\n      })\n      .catch(error => {\n        throw Error(`Can't get introspection from ${url}:\\n${error.message}`);\n      });\n  }\n}\n\nfunction buildRootValue(response) {\n  const rootValue = response.data;\n  const globalErrors = [];\n\n  for (const error of response.errors || []) {\n    if (!error.path) globalErrors.push(error);\n\n    const { message, locations: _1, path: _2, ...extraProps } = error;\n    const errorObj = new Error(error.message);\n    (errorObj as any).extraProps = extraProps;\n\n    // Recreate root value up to a place where original error was thrown\n    // and place error as field value.\n    pathSet(rootValue, error.path, errorObj);\n  }\n\n  // TODO proxy global errors\n  if (globalErrors.length !== 0)\n    console.error(\"Global Errors:\\n\", globalErrors);\n\n  return rootValue;\n}\n\nfunction getExtensionFields(extensionAST) {\n  const extensionFields = {};\n  (extensionAST.definitions || []).forEach(def => {\n    if (def.kind !== Kind.TYPE_EXTENSION_DEFINITION) return;\n    const typeName = def.definition.name.value;\n    // FIXME: handle multiple extends of the same type\n    extensionFields[typeName] = def.definition.fields.map(\n      field => field.name.value\n    );\n  });\n  return extensionFields;\n}\n\nfunction injectTypename(node) {\n  return {\n    ...node,\n    selections: [\n      ...node.selections,\n      {\n        kind: Kind.FIELD,\n        name: {\n          kind: Kind.NAME,\n          value: \"__typename\"\n        }\n      }\n    ]\n  };\n}\n\nfunction stripQuery(schema, queryAST, operationName, extensionFields) {\n  const typeInfo = new TypeInfo(schema);\n\n  const changedAST = visit(\n    queryAST,\n    visitWithTypeInfo(typeInfo, {\n      [Kind.FIELD]: () => {\n        const typeName = typeInfo.getParentType().name;\n        const fieldName = typeInfo.getFieldDef().name;\n\n        if (fieldName.startsWith(\"__\")) return null;\n        if ((extensionFields[typeName] || []).includes(fieldName)) return null;\n      },\n      [Kind.SELECTION_SET]: {\n        leave(node) {\n          const type = typeInfo.getParentType();\n          if (isAbstractType(type) || node.selections.length === 0)\n            return injectTypename(node);\n        }\n      }\n    })\n  );\n\n  let operation = extractOperation(changedAST, operationName);\n  operation = removeUnusedVariables(operation);\n  return print(operation);\n}\n\nfunction removeUnusedVariables(queryAST) {\n  const seenVariables = {};\n  visit(queryAST, {\n    [Kind.VARIABLE_DEFINITION]: () => false,\n    [Kind.VARIABLE]: node => {\n      seenVariables[node.name.value] = true;\n    }\n  });\n\n  // Need to second visit to account for variables used in fragments\n  // so we make modification only when we seen all variables.\n  return visit(queryAST, {\n    [Kind.OPERATION_DEFINITION]: {\n      leave(node) {\n        const variableDefinitions = (node.variableDefinitions || []).filter(\n          def => seenVariables[def.variable.name.value]\n        );\n        return { ...node, variableDefinitions };\n      }\n    }\n  });\n}\n\nfunction extractOperation(queryAST, operationName) {\n  const operations = separateOperations(queryAST);\n  if (operationName) return operations[operationName];\n  return Object.values(operations)[0];\n}\n\nfunction requestFactory(url, headersObj) {\n  return (query, variables?, operationName?, forwardHeaders?, res?) => {\n    return fetch(url, {\n      method: \"POST\",\n      headers: new Headers({\n        \"content-type\": \"application/json\",\n        ...headersObj,\n        ...forwardHeaders\n      }),\n      body: JSON.stringify({\n        operationName,\n        query,\n        variables\n      })\n    }).then(responce => {\n      if (responce.ok) {\n        if (res) {\n          if (responce.headers.raw()[\"set-cookie\"]) {\n            var Cookie = tough.Cookie;\n            responce.headers.raw()[\"set-cookie\"].forEach(str => {\n              const cookie = Cookie.parse(str);\n              res.cookie(cookie.key, cookie.value, {\n                encode: String\n              });\n            });\n          }\n        }\n\n        return responce.json();\n      }\n      return responce.text().then(body => {\n        throw Error(`${responce.status} ${responce.statusText}\\n${body}`);\n      });\n    });\n  };\n}\n"]}