{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport \"core-js/shim\";\n\nimport { Source, parse, concatAST, buildASTSchema } from \"graphql\";\n\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as express from \"express\";\nimport * as graphqlHTTP from \"express-graphql\";\nimport chalk from \"chalk\";\nimport * as opn from \"opn\";\nimport * as cors from \"cors\";\nimport * as bodyParser from \"body-parser\";\nimport { pick } from \"lodash\";\nimport * as yargs from \"yargs\";\nimport * as cookieParser from 'cookie-parser'\n\nimport { fakeSchema } from \"./fake_schema\";\nimport { proxyMiddleware } from \"./proxy\";\nimport { existsSync } from \"./utils\";\n\nconst argv = yargs\n  .command(\"$0 [file]\", \"\", cmd =>\n    cmd.options({\n      port: {\n        alias: \"p\",\n        describe: \"HTTP Port\",\n        type: \"number\",\n        requiresArg: true,\n        default: process.env.PORT || 9002\n      },\n      open: {\n        alias: \"o\",\n        describe: \"Open page with IDL editor and GraphiQL in browser\",\n        type: \"boolean\"\n      },\n      \"cors-origin\": {\n        alias: \"co\",\n        describe: \"CORS: Define Access-Control-Allow-Origin header\",\n        type: \"string\",\n        requiresArg: true\n      },\n      extend: {\n        alias: \"e\",\n        describe: \"URL to existing GraphQL server to extend\",\n        type: \"string\",\n        requiresArg: true\n      },\n      header: {\n        alias: \"H\",\n        describe:\n          'Specify headers to the proxied server in cURL format, e.g.: \"Authorization: bearer XXXXXXXXX\"',\n        type: \"string\",\n        requiresArg: true,\n        implies: \"extend\"\n      },\n      \"forward-headers\": {\n        describe:\n          \"Specify which headers should be forwarded to the proxied server\",\n        type: \"array\",\n        implies: \"extend\"\n      }\n    })\n  )\n  .strict()\n  .help(\"h\")\n  .alias(\"h\", \"help\").epilog(`Examples:\n\n  # Mock GraphQL API based on example IDL and open interactive editor\n  $0 --open\n\n  # Extend real data from SWAPI with faked data based on extension IDL\n  $0 ./ext-swapi.grqphql --extend http://swapi.apis.guru/\n\n  # Extend real data from GitHub API with faked data based on extension IDL\n  $0 ./ext-gh.graphql --extend https://api.github.com/graphql \\\\\n  --header \"Authorization: bearer <TOKEN>\"`).argv;\n\nconst log = console.log;\n\nlet headers = {};\nif (argv.header) {\n  const headerStrings = Array.isArray(argv.header)\n    ? argv.header\n    : [argv.header];\n  for (const str of headerStrings) {\n    const index = str.indexOf(\":\");\n    const name = str.substr(0, index);\n    const value = str.substr(index + 1).trim();\n    headers[name] = value;\n  }\n}\n\nconst forwardHeaderNames = (argv.forwardHeaders || []).map(str =>\n  str.toLowerCase()\n);\n\nconst fileName =\n  argv.file ||\n  (argv.extend ? \"./schema_extension.faker.graphql\" : \"./schema.faker.graphql\");\n\nif (!argv.file) {\n  log(\n    chalk.yellow(\n      `Default file ${chalk.magenta(fileName)} is used. ` +\n        `Specify [file] parameter to change.`\n    )\n  );\n}\n\nconst fakeDefinitionAST = readAST(\n  path.join(__dirname, \"fake_definition.graphql\")\n);\nconst corsOptions = {};\n\nif (argv.co) {\n  corsOptions[\"origin\"] = argv.co;\n  corsOptions[\"credentials\"] = true;\n}\n\nlet userIDL;\nif (existsSync(fileName)) {\n  userIDL = readIDL(fileName);\n} else {\n  // different default IDLs for extend and non-extend modes\n  let defaultFileName = argv.e\n    ? \"default-extend.graphql\"\n    : \"default-schema.graphql\";\n  userIDL = readIDL(path.join(__dirname, defaultFileName));\n}\n\nfunction readIDL(filepath) {\n  return new Source(fs.readFileSync(filepath, \"utf-8\"), filepath);\n}\n\nfunction readAST(filepath) {\n  return parse(readIDL(filepath));\n}\n\nfunction saveIDL(idl) {\n  fs.writeFileSync(fileName, idl);\n  log(\n    `${chalk.green(\"✚\")} schema saved to ${chalk.magenta(\n      fileName\n    )} on ${new Date().toLocaleString()}`\n  );\n  return new Source(idl, fileName);\n}\n\nif (argv.e) {\n  // run in proxy mode\n  const url = argv.e;\n  proxyMiddleware(url, headers)\n    .then(([schemaIDL, cb]) => {\n      schemaIDL = new Source(schemaIDL, `Inrospection from \"${url}\"`);\n      runServer(schemaIDL, userIDL, cb);\n    })\n    .catch(error => {\n      log(chalk.red(error.stack));\n      process.exit(1);\n    });\n} else {\n  runServer(userIDL, null, schema => {\n    fakeSchema(schema);\n    return { schema };\n  });\n}\n\nfunction buildServerSchema(idl) {\n  var ast = concatAST([parse(idl), fakeDefinitionAST]);\n  return buildASTSchema(ast);\n}\n\nfunction runServer(schemaIDL: Source, extensionIDL: Source, optionsCB) {\n  const app = express();\n\n  if (extensionIDL) {\n    const schema = buildServerSchema(schemaIDL);\n    extensionIDL.body = extensionIDL.body.replace(\n      \"<RootTypeName>\",\n      schema.getQueryType().name\n    );\n  }\n  app.options(\"/graphql\", cors(corsOptions));\n\n\n  app.use(cookieParser('secret'))\n\n  app.use(\n    \"/graphql\",\n    cors(corsOptions),\n    (req, res, next) => {\n      const schema = buildServerSchema(schemaIDL);\n      const forwardHeaders = pick(req.headers, forwardHeaderNames);\n\n      return graphqlHTTP({\n        ...optionsCB(schema, extensionIDL, forwardHeaders, res),\n        graphiql: true,\n      })(req, res);\n      next()\n    }\n  )\n\n  app.get(\"/user-idl\", (_, res) => {\n    res.status(200).json({\n      schemaIDL: schemaIDL.body,\n      extensionIDL: extensionIDL && extensionIDL.body\n    });\n  });\n\n  app.use(\"/user-idl\", bodyParser.text());\n\n  app.post(\"/user-idl\", (req, res) => {\n    try {\n      if (extensionIDL === null) schemaIDL = saveIDL(req.body);\n      else extensionIDL = saveIDL(req.body);\n\n      res.status(200).send(\"ok\");\n    } catch (err) {\n      res.status(500).send(err.message);\n    }\n  });\n\n  app.use(\"/editor\", express.static(path.join(__dirname, \"editor\")));\n\n  const server = app.listen(argv.port);\n\n  const shutdown = () => {\n    server.close();\n    process.exit(0);\n  };\n\n  process.on(\"SIGINT\", shutdown);\n  process.on(\"SIGTERM\", shutdown);\n\n  log(`\\n${chalk.green(\"✔\")} Your GraphQL Fake API is ready to use 🚀\n  Here are your links:\n\n  ${chalk.blue(\"❯\")} Interactive Editor:\\t http://localhost:${argv.port}/editor\n  ${chalk.blue(\"❯\")} GraphQL API:\\t http://localhost:${argv.port}/graphql\n\n  `);\n\n  if (argv.open) {\n    setTimeout(() => opn(`http://localhost:${argv.port}/editor`), 500);\n  }\n}\n"]}